
name: Build

on:
  push:
    tags:
      - '*'
    branches:
      - main
      - 536-github-automated-build

env:
  SERVER_PKG: cosmos_server
  CLIENT_PKG: cosmos_client

jobs:
  build-package:
    name: Build & Package (${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            exe_suffix: ""
            shell: bash
            needs_deps: true
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            exe_suffix: ".exe"
            shell: pwsh
            needs_deps: false
          - os: macos-latest
            target: x86_64-apple-darwin
            exe_suffix: ""
            shell: bash
            needs_deps: false
          - os: macos-latest
            target: aarch64-apple-darwin
            exe_suffix: ""
            shell: bash
            needs_deps: false

    steps:
      - uses: olegtarasov/get-tag@v2.1.2
        id: get_version

      - uses: actions/checkout@v4
        with:
          lfs: false

      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      # Linux-only native libs (okay to skip elsewhere)
      - name: Install Linux deps
        if: ${{ matrix.needs_deps }}
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            pkg-config libx11-dev libasound2-dev libudev-dev \
            libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev \
            libwayland-dev

      - name: Build both binaries (release) (Unix)
        if: runner.os != 'Windows'
        run: |
          cargo build --release -p ${{ env.SERVER_PKG }} -p ${{ env.CLIENT_PKG }} --target ${{ matrix.target }}

      - name: Build both binaries (release) (Windows)
        if: runner.os == 'Windows'
        run: |
          cargo build --release -p $env:SERVER_PKG -p $env:CLIENT_PKG --target ${{ matrix.target }}
      
      # ---------- Package (non-Windows) ----------
      - name: Package (Unix)
        if: ${{ runner.os != 'Windows' }}
        run: |
          set -eu

          VERSION="${{ steps.get_version.outputs.tag }}"
          if [ -z "$VERSION" ]; then VERSION="$(date -u +%Y%m%d%H%M%S)"; fi

          DIST="dist"
          OUTDIR="${DIST}/cosmos_release_${VERSION}_${{ matrix.target }}"
          mkdir -p "${OUTDIR}/cosmos_server" "${OUTDIR}/cosmos_client"

          # Copy server binary + data
          cp "target/${{ matrix.target }}/release/${{ env.SERVER_PKG }}${{ matrix.exe_suffix }}" "${OUTDIR}/cosmos_server/"
          [ -d "${{ env.SERVER_PKG }}/assets" ] && cp -r "${{ env.SERVER_PKG }}/assets" "${OUTDIR}/cosmos_server/"
          [ -d "${{ env.SERVER_PKG }}/config" ] && cp -r "${{ env.SERVER_PKG }}/config" "${OUTDIR}/cosmos_server/"
          [ -d "${{ env.SERVER_PKG }}/default_blueprints" ] && cp -r "${{ env.SERVER_PKG }}/default_blueprints" "${OUTDIR}/cosmos_server/"
          [ -f "${{ env.SERVER_PKG }}/steam_appid.txt" ] && cp "${{ env.SERVER_PKG }}/steam_appid.txt" "${OUTDIR}/cosmos_server/"

          # Copy client binary + data
          cp "target/${{ matrix.target }}/release/${{ env.CLIENT_PKG }}${{ matrix.exe_suffix }}" "${OUTDIR}/cosmos_client/"
          [ -d "${{ env.CLIENT_PKG }}/assets" ] && cp -r "${{ env.CLIENT_PKG }}/assets" "${OUTDIR}/cosmos_client/"

          # Zip it
          ( cd "${DIST}" && zip -r "cosmos_release_${VERSION}_${{ matrix.target }}.zip" "cosmos_release_${VERSION}_${{ matrix.target }}" >/dev/null )
        shell: bash

      # ---------- Package (Windows) ----------
      - name: Package (Windows)
        if: ${{ runner.os == 'Windows' }}
        run: |
          $ErrorActionPreference = 'Stop'

          $version = '${{ steps.get_version.outputs.tag }}'
          if ([string]::IsNullOrEmpty($version)) { $version = (Get-Date -Format "yyyyMMddHHmmss") }

          $dist   = "dist"
          $outdir = Join-Path $dist "cosmos_release_${version}_${{ matrix.target }}"
          New-Item $outdir -ItemType Directory -Force | Out-Null
          New-Item (Join-Path $outdir "cosmos_server") -ItemType Directory -Force | Out-Null
          New-Item (Join-Path $outdir "cosmos_client") -ItemType Directory -Force | Out-Null

          # Copy server
          Copy-Item "target\${{ matrix.target }}\release\${{ env.SERVER_PKG }}${{ matrix.exe_suffix }}" (Join-Path $outdir "cosmos_server\") -Force
          if (Test-Path "${{ env.SERVER_PKG }}\assets") { Copy-Item "${{ env.SERVER_PKG }}\assets" (Join-Path $outdir "cosmos_server\") -Recurse -Force }
          if (Test-Path "${{ env.SERVER_PKG }}\config") { Copy-Item "${{ env.SERVER_PKG }}\config" (Join-Path $outdir "cosmos_server\") -Recurse -Force }
          if (Test-Path "${{ env.SERVER_PKG }}\default_blueprints") { Copy-Item "${{ env.SERVER_PKG }}\default_blueprints" (Join-Path $outdir "cosmos_server\") -Recurse -Force }
          if (Test-Path "${{ env.SERVER_PKG }}\steam_appid.txt") { Copy-Item "${{ env.SERVER_PKG }}\steam_appid.txt" (Join-Path $outdir "cosmos_server\") -Force }

          # Copy client
          Copy-Item "target\${{ matrix.target }}\release\${{ env.CLIENT_PKG }}${{ matrix.exe_suffix }}" (Join-Path $outdir "cosmos_client\") -Force
          if (Test-Path "${{ env.CLIENT_PKG }}\assets") { Copy-Item "${{ env.CLIENT_PKG }}\assets" (Join-Path $outdir "cosmos_client\") -Recurse -Force }

          # Zip it
          $zipPath = Join-Path $dist "cosmos_release_${version}_${{ matrix.target }}.zip"
          if (Test-Path $zipPath) { Remove-Item $zipPath -Force }
          Compress-Archive -Path (Join-Path $outdir '*') -DestinationPath $zipPath -Force
        shell: pwsh

      - name: Upload artifact (zip)
        uses: actions/upload-artifact@v4
        with:
          name: cosmos-${{ matrix.target }}
          path: dist/cosmos_release_*_${{ matrix.target }}.zip
          retention-days: 30

