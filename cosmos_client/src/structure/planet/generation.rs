//! Responsible for the default generation of biospheres.

use std::fs;

use crate::{netty::connect::WaitingOnServer, registry::sync_registry, state::game_state::GameState};
use bevy::prelude::*;
use bevy_app_compute::prelude::*;
use cosmos_core::structure::planet::{
    biosphere::Biosphere,
    generation::{
        biome::{Biome, BiosphereBiomesRegistry},
        terrain_generation::{BiosphereShaderWorker, ChunkData, GpuPermutationTable},
    },
};

#[derive(Event, Debug)]
/// Sent whenever the terrain generation data is updated from the server
pub(crate) struct SetTerrainGenData {
    /// The files for wgsl shaders (path, shader code)
    pub files: Vec<(String, String)>,
    /// The permutation table to send to the GPU
    pub permutation_table: GpuPermutationTable,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone, SystemSet)]
/// Stages a biosphere must go through to generate a chunk
pub enum BiosphereGenerationSet {
    /// The biosphere should flag the chunks they want generated by adding them to the [`NeedGeneratedChunks`] resource.
    FlagChunksNeedGenerated,
    /// Chunk generation requests are sent to the GPU when it is available for new generations. This is handled for all biospheres
    /// automatically that put their chunk requests in [`NeedGeneratedChunks`]
    GpuInteraction,
    /// Chunks that are ready to be populated with blocks are now sent and can be read via the EventReader for [`DoneGeneratingChunkEvent`].
    GenerateChunks,
    /// Called after the [`BiosphereGenerationSet::GenerateChunks`] set. This should be used for things like trees.
    GenerateChunkFeatures,
}

#[derive(Resource)]
struct NeedsTerrainDataFlag(Entity);

fn add_needs_terrain_data(mut commands: Commands) {
    let entity = commands
        .spawn((Name::new("Waiting on biosphere compute shader + values"), WaitingOnServer))
        .id();

    commands.insert_resource(NeedsTerrainDataFlag(entity));
}

fn setup_lod_generation(
    mut commands: Commands,
    mut ev_reader: EventReader<SetTerrainGenData>,
    terrain_data_flag: Res<NeedsTerrainDataFlag>,
    mut worker: ResMut<AppComputeWorker<BiosphereShaderWorker>>,
) {
    for ev in ev_reader.read() {
        let mut working_dir = std::env::current_dir().expect("Can't get working dir");
        working_dir.push("./assets/temp/shaders/biosphere/");

        // Clears out any existing shaders from previous servers
        let _ = fs::remove_dir_all(&working_dir);

        for (file_name, file_contents) in ev.files.iter() {
            if file_name.contains("..") || !file_name.ends_with(".wgsl") {
                error!("File name '{file_name}' contained '..' or didn't end in '.wgsl' - this file will not be created!");
                continue;
            }

            let mut path_buf = working_dir.clone();
            path_buf.push(file_name);

            if !path_buf.as_path().starts_with(&working_dir) {
                error!("The path traversed outside of the biosphere shaders directory - not saving file.");
                continue;
            }

            let dir = path_buf.parent().expect("Path has no directory? This should be impossible.");
            // This can fail if it's already there
            let _ = fs::create_dir_all(dir);

            let file_contents = file_contents.replacen("#import \"", "#import \"temp/shaders/biosphere/", usize::MAX);

            if let Err(e) = fs::write(path_buf, file_contents) {
                error!("{:?}", e);
                continue;
            }
        }

        worker.write_slice("permutation_table", &ev.permutation_table.0);

        commands.insert_resource(ev.permutation_table.clone());
        commands.remove_resource::<NeedsTerrainDataFlag>();
        commands.entity(terrain_data_flag.0).despawn_recursive();
    }
}

pub(super) fn register(app: &mut App) {
    sync_registry::<Biosphere>(app);
    sync_registry::<Biome>(app);
    sync_registry::<BiosphereBiomesRegistry>(app);

    app.configure_sets(
        Update,
        (
            BiosphereGenerationSet::FlagChunksNeedGenerated,
            BiosphereGenerationSet::GpuInteraction,
            BiosphereGenerationSet::GenerateChunks,
            BiosphereGenerationSet::GenerateChunkFeatures,
        )
            .chain(),
    )
    .add_plugins(AppComputeWorkerPlugin::<BiosphereShaderWorker>::default())
    .add_systems(OnEnter(GameState::LoadingWorld), add_needs_terrain_data)
    .add_systems(
        Update,
        setup_lod_generation
            .run_if(resource_exists::<NeedsTerrainDataFlag>)
            .run_if(in_state(GameState::LoadingWorld)),
    )
    .init_resource::<ChunkData>()
    .add_event::<SetTerrainGenData>();
}
